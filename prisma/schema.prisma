generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Product {
  id         String   @id @unique @default(uuid())
  name       String
  price      Float
  image      String
  // many to one
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId Int
}

model Category {
  id   Int    @id @unique
  name String
  icon String
  slug String

  // one to many
  products Product[]
}

model Order {
  id         String   @id @unique @default(uuid())
  name       String
  date       String
  total      Float
  // many to one
  order      AuthUser @relation(fields: [customerId], references: [id])
  customerId String
}

// Resumen - ShoppingCart
// todo : add relation with a Customer - Customer now is a auth user
model ShoppingCart {
  id         String   @id @unique @default(uuid())
  name       String
  date       String
  price      Int
  // many to one
  order      AuthUser @relation(fields: [customerId], references: [id])
  customerId String
}

model AuthUser {
  id           String        @id @unique
  auth_session AuthSession[]
  auth_key     AuthKey[]
  // here you can add custom fields for your user
  // e.g. name, email, username, roles, etc.
  name         String
  lastName     String
  address      String?
  username     String?
  phone        String?
  email        String

  // one to many
  orders       Order[]
  ShoppingCart ShoppingCart[]

  @@map("auth_user")
}

model AuthSession {
  id             String   @id @unique
  user_id        String
  active_expires BigInt
  idle_expires   BigInt
  auth_user      AuthUser @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
  @@map("auth_session")
}

model AuthKey {
  id              String   @id @unique
  hashed_password String?
  user_id         String
  primary_key     Boolean
  expires         BigInt?
  auth_user       AuthUser @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
  @@map("auth_key")
}
